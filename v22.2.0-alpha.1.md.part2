<h3 id="v22-2-0-alpha-1-operational-changes">Operational changes</h3>

- Introduced the `kv.allocator.l0_sublevels_threshold` and `kv.allocator.L0_sublevels_threshold_enforce` [cluster settings](../{{site.versions["dev"]}}/cluster-settings.html), which enable excluding stores as targets for allocation and rebalancing 
of replicas when they have high-read amplification, indicated by the number of L0 sub-levels in level 0 of the store's LSM. By default, `kv.allocator.l0_sublevels_threshold` is set to `20` and `kv.allocator.l0_sublevels_threshold_enforce` is set to 
`block_none_log`. When both `kv.allocator.l0_sublevels_threshold` and the cluster average is exceeded, the action corresponding to `kv.allocator.l0_sublevels_threshold_enforce` is taken, as follows: [#78608][#78608]
    - `block_none` will exclude no candidate stores
    - `block_none_log` will exclude no candidates but log an event
    - `block_rebalance_to` will exclude candidates stores from being targets of rebalance actions
    - `block_all` will exclude candidate stores from being targets of both allocation and rebalancing.
- Added `requests-per-second`, exposed through the `rebalancing.requestspersecond` metric. `requests-per-second` tracks the average number of requests received per store, aggregated over the ranges it contains. Also added `reads-per-second`, exposed 
through the `rebalanacing.readspersecond` metric. `reads-per-second` tracks the count of keys read per second, on a replica basis. [#76609][#76609]
- `HottestRanges` will now report additional range statistics for the reported ranges. These statistics are: 
    - requests per second: the number of requests received by this range recently per second. 
    - writes per second: the number of keys written to in this range recently per second. 
    - reads per second: the number of keys read from this range recently, per second. 
    - write bytes per second: the number of bytes written to this range recently, per second.
    - read bytes per second: the number of bytes read from this range recently, per second. [#76609][#76609]
- Increased the default value of `kv.transaction.max_refresh_span_bytes` from 256KB to 4MB. [#80115][#80115]
- Added metrics `range.snapshots.shapshots.(unknown|recovery|rebalancing).sent-bytes` and `range.snapshots.shapshots.(unknown|recovery|rebalancing).rcvd-bytes` to the metrics dashboard. This allows tracking the number of bytes sent/received for each 
type of metric in addition to the total bytes sent/received. [#81860][#81860]
- `httpSink` and `fluentSinks` will now, by default, have buffered writes enabled. This means that writes to these sinks will be asynchronous. This will show in the output of `debug check-log-config` as well as impact the default behavior of these 
two types of network sinks. This is enabled via a new default `buffering` configuration for both the `httpSink` and `fluentSink`, where the default values are as follows: [#82893][#82893]
    - `max-staleness`: The maximum amount of time between flushes to the underlying http or fluent sink. Default: `5s`
    - `flush-trigger-size`: The size in bytes of accumulated messages in the buffer that will trigger a flush. 0 disables this trigger. Default: `1MiB`
    - `max-buffer-size`: Limits the size of the buffer. When a new message is causing the buffer to overflow beyond this limit, existing messages are dropped. Default: `50MiB`
- I/O [admission control](../{{site.versions["dev"]}}/architecture/admission-control.html) now reduces the likelihood of storage layer write stalls, which can be caused when memtable flushes become a bottleneck. This is done by limiting write tokens 
based on flush throughput, so as to reduce storage layer write stalls. Consequently, write tokens are now limited both by flush throughput, and by compaction throughput out of L0. This behavior is enabled by default. The 
`admission.min_flush_util_fraction` [cluster setting](../{{site.versions["dev"]}}/cluster-settings.html), defaulting to `0.5`, can be used to disable or tune flush throughput-based admission tokens. Setting it to a value greater than `1`, e.g., 
`10`, will disable flush-based tokens. Tuning the behavior, without disabling it, should be done only on the recommendation of a domain expert. [#82440][#82440]
- The `admission.kv.pause_replication_io_threshold` [cluster setting](../{{site.versions["dev"]}}/cluster-settings.html) can be set to a nonzero value to reduce I/O throughput on followers that are driven toward an inverted LSM by replication 
traffic. The functionality is disabled by default. A suggested value is `0.8`, meaning that replication traffic to non-essential followers is paused before these followers will begin throttling their foreground traffic. [#83851][#83851]
- Adjusted the way memory is tracked against `kv.transaction.max_intents_bytes` and `kv.transaction.max_refresh_spans_bytes` to be more precise. As a result, the stability of CockroachDB has improved. However, this change effectively reduces the 
budgets determined by those cluster settings. In practice, this means that:
    - the intents might be tracked more coarsely (due to span coalescing), which makes the intent resolution less efficient. 
    - the refresh spans become more coarse too, making it more likely that `ReadWithinUncertaintyIntervalError`s are returned to the user rather than retried transparently. [#84230][#84230]
- Added the storage metrics `rangekeycount`, `rangekeybytes`, `rangevalcount`, and `rangevalbytes` for MVCC range keys (i.e., MVCC range tombstones). These are analogous to the corresponding point key metrics (e.g., `keycount`). [#85453][#85453]
- Added new metrics `range.snapshots.(send|recv)-queue` and `range.snapshots.(send|recv)-in-progress` to track the number of queued and in-progress snapshots being sent or received on a store. [#84947][#84947]
- The [cluster settings](../{{site.versions["dev"]}}/cluster-settings.html) `bulkio.restore_at_current_time.enabled` and `bulkio.import_at_current_time.enabled`, which were introduced in v22.1 and defaulted to `true`, have been retired. They are now  
always enabled. [#85757][#85757]
- Added new metrics for tracking the successes/errors of a replica being processed by the replicate queue, using the allocator action as a method of categorizing these actions. 
    - `queue.replicate.addreplica.(success|error)` 
    - `queue.replicate.removereplica.(success|error)` 
    - `queue.replicate.replacedeadreplica.(success|error)` 
    - `queue.replicate.removedeadreplica.(success|error)` 
    - `queue.replicate.replacedecommissioningreplica.(success|error)` 
    - `queue.replicate.removedecommissioningreplica.(success|error)` 
[#85844][#85844]
- Clusters can now run nodes with different [`--max-offset`](../{{site.versions["dev"]}}/cockroach-start.html#flags-max-offset) settings at the same time. This enables operators to perform a rolling restart to change the value of each node's 
`--max-offset` flag. [#85983][#85983]
- Introduced a new `server.secondary_tenants.redact_trace` [cluster setting](../{{site.versions["dev"]}}/cluster-settings.html) that controls if traces should be redacted for operations run on behalf of secondary tenants. [#85853][#85853]
- The `admission.kv.pause_replication_threshold` [cluster setting](../{{site.versions["dev"]}}/cluster-settings.html) is now set to a default value of `0.8`. On a fully migrated v22.2+ deployment, this will allow the KV layer to pause replication 
streams to followers located on stores that are close to activating their I/O admission control subsystem (thereby protecting these followers from additional overload). This cluster setting can be disabled by setting it to `0`. [#86147][#86147]
- Added a `sql.insights.execution_insights_capacity` [cluster setting](../{{site.versions["dev"]}}/cluster-settings.html), which limits the number of SQL execution insights retained in memory per node. [#86272][#86272]
- The new `sql.insights.high_retry_count.threshold` [cluster setting](../{{site.versions["dev"]}}/cluster-settings.html) may be used to configure how many times a slow statement (as identified by the execution insights system) must have been retried 
to be marked as having a high retry count. [#86415][#86415]
- Finalizing an upgrade to v22.2 requires that all in-flight schema changes enter a terminal state. This may mean that finalization takes as long as the longest-running schema change. [#76154][#76154]
- The option `sql.mvcc_compliant_index_creation.enabled` has been removed. [#76154][#76154]
- Added a new [time series metric](../{{site.versions["dev"]}}/monitoring-and-alerting.html) `storage.keys.range-key-set.count` for observing the count of internal range key set keys in the storage engine. In v22.2, these RangeKeySet keys are only 
used during `DROP`/`TRUNCATE` table operations, or when canceling an [import](../{{site.versions["dev"]}}/import.html). [#86570][#86570]
- The `sql.insights.anomaly_detection.enabled` [cluster setting](../{{site.versions["dev"]}}/cluster-settings.html) now defaults to `true`, and the `sql.insights.anomaly_detection.latency_threshold` cluster setting now defaults to `50ms`, down from 
`100ms` to complement the fixed-threshold detector's default of `100ms`. [#86673][#86673]
- The disk bandwidth constraint can now be used to control admission of elastic writes. This requires configuration for each store, via the `--store` flag, that now contains an optional provisioned-rate field. The provisioned-rate field, if 
specified, needs to provide a disk-name for the store and optionally a disk bandwidth. If the disk bandwidth is not provided the cluster setting `kv.store.admission.provisioned_bandwidth` will be used. The cluster setting defaults to `0` (which 
means that the disk bandwidth constraint is disabled). If the effective disk bandwidth is `0` (including if using the possibly overridden cluster setting), the disk bandwidth constraint is disabled. Additionally, the admission control cluster 
setting `admission.disk_bandwidth_tokens.elastic.enabled` (which defaults to `true`) can be used to turn off enforcement even if other settings enable it. Turning off enforcement will still output all the relevant information about disk bandwidth 
usage, so can be used to observe part of the mechanism in action. To summarize, to enable this for a cluster with homogeneous disk, provide a disk-name in the provisioned-rate field in the store-spec, and set the 
`kv.store.admission.provisioned_bandwidth` cluster setting to the bandwidth limit. To only get information about disk bandwidth usage by elastic traffic (currently via logs, not metrics), perform the above actions and also set 
`admission.disk_bandwidth_tokens.elastic.enabled` to `false`. [#86063][#86063]
- The `admission.kv.pause_replication_io_threshold` [cluster setting](../{{site.versions["dev"]}}/cluster-settings.html) now defaults to `0` (off). [#86776][#86776]
- Clusters that are upgraded to an alpha or other manual build from the development branch will not be able to subsequently upgrade to a release build. [#86345][#86345]
- Added the `rebalancing.writebytespersecond` and `rebalancing.readbytespersecond` [time series metrics](../{{site.versions["dev"]}}/monitoring-and-alerting.html). These metrics reflect the average number of bytes written and read across all 
replicas per store, over the last 30 minutes. [#80245][#80245]

<h3 id="v22-2-0-alpha-1-command-line-changes">Command-line changes</h3>

- Added support for the `\password` CLI command that enables secure alteration of the password for a user. The given password will always be pre-hashed with the password hash method obtained via the [session 
variable](../{{site.versions["dev"]}}/set-vars.html) `password-encryption`, e.g., `scram-sha-256` as the default hashing algorithm. [#77975][#77975]
- Changed the default `debug compact` maximum compaction concurrency to the number of processors, and added a `--max-concurrency` flag for overriding the new default. [#78987][#78987]
- The standalone [`cockroach-sql`](../{{site.versions["dev"]}}/cockroach-sql-binary.html) executable now has more compatibility with [`cockroach sql`](../{{site.versions["dev"]}}/cockroach-sql.html), so it can be used as a drop-in replacement. For 
example, it supports running without a URL, using connection defaults. It also supports overriding `--certs-dir` and other client-side options also supported by `cockroach sql`. [#82020][#82020]
- `BYTEA` values are now formatted according to the `bytea_output` [session setting](../{{site.versions["dev"]}}/set-vars.html). [#81943][#81943]
- The statement tag displayed for `INSERT` statements now has the full information returned by the server: the string `"INSERT"`, followed by the `OID` of the row that was inserted (which is currently always `0` in CockroachDB), followed by the 
number of rows inserted. [#81943][#81943]
- CLI commands that use a SQL connection (e.g., [`cockroach sql`](../{{site.versions["dev"]}}/cockroach-sql.html) and [`cockroach node status`](../{{site.versions["dev"]}}/cockroach-node.html)) now support connecting with `PGPASSFILE` and 
`PGSERVICEFILE`. The behavior is compatible with how `libpq` (the psql C library) behaves. The `PGPASSFILE` file defaults to the filepath `~/.pgpass`, and has the format `hostname:port:database:username:password`, where the password field from the 
first line that matches the current connection parameters will be used to connect to the database. The `PGSERVICEFILE` file defaults to the filepath `~/.pg_service.conf`, and has the format:
    ~~~shell
    [myservice]
    host=somehost
    port=26257
    user=someuser
    ~~~
    - Any connection parameters (including `passfile` or `password`) can be specified in this file as well. Then, a connection string that specifies the `service=myservice` connection parameter will use the values in `PGSERVICEFILE` to connect. 
[#82389][#82389]
- CLI commands that use a SQL connection (e.g., [`cockroach sql`](../{{site.versions["dev"]}}/cockroach-sql.html), `cockroach node status`) now default to using the file in `~/.postgresql/root.crt` for the `sslrootcert` when connecting. The file can 
still be configured using the `PGSSLROOTCERT` environment variable or the `sslrootcert` URL parameter. [#82389][#82389]
- Using [`COPY`](../{{site.versions["dev"]}}/copy-from.html) in the SQL shell is now supported while inside an explicit transaction. [#82101][#82101]
- `CTRL+C` (the interrupt signal) can now be used in the CLI to attempt to cancel the currently executing SQL query. [#82101][#82101]
- [`cockroach sql`](../{{site.versions["dev"]}}/cockroach-sql.html) (and thus [`cockroach demo`](../{{site.versions["dev"]}}/cockroach-demo.html) too) now support the client-side commands `\o` and `\qecho`, like `psql`:
    - The `\o` command can redirect the output of SQL queries to a file
    - The `\qecho` command adds arbitrary text to the current query output file. [#83118][#83118]
- CockroachDB now produces a clearer error when the path specified via `--socket-dir` is too long. [#84532][#84532]
- When the `--background` flag is specified, CockroachDB now makes three attempts to find a suitable directory to create the notification socket: the value of `--socket-dir` if specified, the value of `$TMPDIR` (or `/tmp` if the environment variable 
is empty), and the current working directory. If none of these directories has a name short enough, an explanatory error is printed. [#84532][#84532]

<h3 id="v22-2-0-alpha-1-api-endpoint-changes">API endpoint changes</h3>

- Added logic to support dropping unused [index](../{{site.versions["dev"]}}/indexes.html) recommendations. [#77642][#77642]
- `ListSessions` now returns closed sessions in addition to open sessions. `ListSessionsRequest` now has a `exclude_closed_sessions` flag, which is a `BOOL` to exclude closed sessions. `serverpb.Session` now has `end` and `status` fields, which 
specify the time the session ended and the status (`opened`, `closed`) of the session, respectively. [#78650][#78650]
- Updated the `api/v2/rules` endpoint to include additional rules for [events to alert on](../{{site.versions["dev"]}}/monitoring-and-alerting#events-to-alert-on). [#80274][#80274]
- Added a new `last_auto_retry_reason` field under the `active_txn` field for a session to the `ListSessions` API. This field contains the string describing the retry reason or `nil` if none exists. This is also surfaced in the 
[`crdb_internal.{cluster,node}_transactions`](../{{site.versions["dev"]}}/crdb-internal.html) tables and in the output of the [`SHOW TRANSACTIONS`](../{{site.versions["dev"]}}/show-transactions.html) statement under the `last_auto_retry_reason` 
column. [#81531][#81531]
- `serverpb.Session` now has three new fields: number of transactions executed, transaction fingerprint IDs, and total active time. [#82352][#82352]
- Added information about total bytes, live (non-MVCC) bytes and live (non-MVCC) percentage to the table details endpoint. [#83677][#83677]
- Added support for index recommendations to be returned on the statement details API. [#85863][#85863]

<h3 id="v22-2-0-alpha-1-db-console-changes">DB Console changes</h3>

- Added index created time as an option on the DB Console [Databases page](../{{site.versions["dev"]}}/ui-databases-page.html). [#78283][#78283]
- Users can now see actively running queries and transactions in the [SQL Activity page](../{{site.versions["dev"]}}/ui-overview.html#sql-activity). The transactions and statements tabs in SQL activity now have a menu to show either active or 
historical transactions and statements data. [#76753][#76753]
- Added the last modified timestamp and coordinator ID to the [Jobs page](../{{site.versions["dev"]}}/ui-jobs-page.html) to aid in debugging jobs issues. [#78501][#78501]
- Added index recommendations to the [Databases page](../{{site.versions["dev"]}}/ui-databases-page.html) for the Databases, Database Details, Database Table, and Index Details graphs. [#79365][#79365]
- Fixed resizing of tables on the [Hot Ranges page](../{{site.versions["dev"]}}/ui-hot-ranges-page.html). [#80481][#80481]
- [Sessions Overview](../{{site.versions["dev"]}}/ui-sessions-page.html) and Session Details pages now display closed sessions. The Sessions Overview Page now has username and session status filters. [#80410][#80410]
- The **Learn more** link on an empty transactions link now mentions transactions. [#81530][#81530]
- The Circuit Breaker Tripped events chart now displays the rate of events per interval instead of accumulated number of events. [#81438][#81438]
- The [Jobs page](../{{site.versions["dev"]}}/ui-jobs-page.html) now shows the oldest time (in UTC) that jobs are shown for. [#81148][#81148]
- The [Cluster Overview page](../{{site.versions["dev"]}}/ui-cluster-overview-page.html) now displays a banner containing the previous versions of the cluster with a message `cluster_version - Mixed Versions` when a cluster runs nodes with different 
versions. [#82118][#82118]
- Fixed grammar on the mixed-version banner alert. [#83150][#83150]
- On the [SQL Activity page](../{{site.versions["dev"]}}/ui-overview.html#sql-activity), the selection to view historical or active executions will now persist between tabs. [#83903][#83903]
- The [Active Statements](../{{site.versions["dev"]}}/ui-overview.html#sql-activity) and Active Transactions pages now have a single filter option for internal apps. These pages no longer display internal statements and transactions by default. 
[#83014][#83014]
- Added MVCC information to the tables list on the [Databases page](../{{site.versions["dev"]}}/ui-databases-page.html) and on the Tables Details page. [#84037][#84037]
- Updated the [Jobs Details page](../{{site.versions["dev"]}}/ui-jobs-page.html) to a new design and added information about last execution time, next execution time, and execution count. [#84498][#84498]
- Updated the style in the Statement Details, Active Statement Details, Transaction Details, and Active Transaction Details summary component to be consistent with other existing styles. [#84500][#84500]
- Updated the time picker options to remove `"1"` on the hour and day options. [#84510][#84510]
- Added the Last Execution Time column to the [SQL Activity](../{{site.versions["dev"]}}/ui-overview.html#sql-activity) overview, which allow users to sort by when queries were executed. This column is hidden by default. [#84501][#84501]
- Added `Range Key Bytes` and `Range Value Bytes` stats on the Node Details page. [#85599][#85599]
- A new section, Wait Time Insights has been added to the [Active Statement](../{{site.versions["dev"]}}/ui-overview.html#sql-activity) and [Transaction Details](../{{site.versions["dev"]}}/ui-transactions-page.html) pages. The section is included 
if the transaction being viewed is experiencing contention and includes information on the blocked schema, table, index name, time spent blocking, and the transactions blocking or waiting for the viewed transaction. Only users having `VIEWACTIVITY` 
or higher can view this feature. The column Time Spent Waiting has been added to the active executions tables that shows the total amount of time an execution has been waiting for a lock. [#85081][#85081]
- The Explain Plans tab on [Statement Details](../{{site.versions["dev"]}}/ui-statements-page.html) page now displays insights of index recommendations. [#85863][#85863]
- Added new Insights page to the DB Console. [#84612][#84612]
- Added the following fields to the [Active Statement](../{{site.versions["dev"]}}/ui-overview.html#sql-activity) and [Transaction Details](../{{site.versions["dev"]}}/ui-transactions-page.html) pages: 
    - Full Scan: indicates if the execution contains a full scan. 
    - Last Retry Reason (Transactions page only): the last recorded reason the transaction was retried.
    - Priority (Transactions page only): the transaction priority. [#85974][#85974]
- The following fields have been added to the [Sessions Overview](../{{site.versions["dev"]}}/ui-sessions-page.html) page: 
    - Transaction Count: the number of transactions executed by the session. 
    - Session Active Duration: the time a session spent executing transactions. 
    - Most recent Session fingerprint ids. [#85974][#85974]
- Removed the **back to sessions** link on Session Details "not found" page. [#86050][#86050]
- The statements and transaction fingerprint now refreshes data every 5 minutes for non-custom time ranges. [#85772][#85772]
- The `time spent waiting` columns for active execution tables has been hidden in {{ site.data.products.db }}. [#86264][#86264]
- Transactions and statements in active execution pages that are waiting for a lock will now have the status `Waiting`. [#86329][#86329]
- Added new Workload Insight Details page to the DB Console. [#86325][#86325]
- Added a button on the [Statement Details](../{{site.versions["dev"]}}/ui-statements-page.html) page under the **Explain Plan** tab to perform the index recommendation directly from the DB Console. [#86382][#86382]
- Removed the `Next Planned Execution Time` label, when the job doesn't have a next planned execution scheduled. [#86486][#86486]
- Added a filter for live nodes based on `MembershipStatus` to resolve an issue where decommissioned nodes would in rare cases display as live in the DB Console. [#86252][#86252]
- Added new styles of summary cards on [Session Details](../{{site.versions["dev"]}}/ui-sessions-page.html#session-details) page to align with other details pages. [#86572][#86572]
- Added a link to the Explain Plan table linking to [`EXPLAIN`](../{{site.versions["dev"]}}/explain.html) documentation. [#86581][#86581]
- Surfaced paused replicas to Range Report, Problem Ranges, and Replication Metrics pages. [#86407][#86407]
- Changed the Plans table within the **Explain Plan** tab of the [Statement Details](../{{site.versions["dev"]}}/ui-statements-page.html) page to use a plan gist instead of the plan ID. Also added the plan gist as the first line on the Explain Plan 
display. [#86653][#86653]
- Added clarification of the compression used to the tooltip of table size. [#86821][#86821]
- Changed the height of the SQL Box on Session Details, Active Transaction Details, Job Details, and Active Statement Details pages. [#86812][#86812]
- Added the new Schema Insights page to the DB Console, which displays a table of schema insights including different types of index recommendations (i.e., `DROP`/`CREATE`/`REPLACE` index recommendations). Each schema insight row offers the user the 
ability to execute the corresponding SQL query that realizes their schema insight via a clickable button. Filters are available to filter the surfaced schema insights by database and insight type, as well as search. [#86317][#86317]
